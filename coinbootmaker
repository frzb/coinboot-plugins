#!/bin/bash -e
set -x

# Copyright (C) 2018 Gunter Miegel coinboot.io
#
# This file is part of Coinboot.
# This software may be modified and distributed under the terms
# of the MIT license.  See the LICENSE file for details.

# Helper script to convert initramfs archive into a Docker container.

display_help() {
  echo
  echo 'Coinbootmaker creates an environment for building Coinboot plugins from an'
  echo 'given Coinboot Initramfs.'
  echo
  echo 'When no arguments beside the path to a Coinboot Initramfs is supplied'
  echo 'Coinbootmaker automatically builds all plugins from the ./src directory.'
  echo 'Packaged Coinboot pluings are written to the ./builds directory'
  echo
  echo 'Usage: coinbootmaker [-i] <path to initramfs>'
  echo
  echo '-i            Interactive mode - opens a shell in the build environment'
  echo '-h            Display this help'
  echo
}

while getopts "ih" opt; do
  case $opt in
    i)
      interactive=true
      ;;
    h)
      display_help
      exit 1
      ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      ;;
  esac
done

shift $((OPTIND -1))

BASEDIR=$PWD
INITRAMFS=$(readlink -f $1)
WORKING_DIRECTORY=/dev/shm/$(basename $INITRAMFS)_extracted_by_coinbootmaker

install -d cache
install -d build

mkdir -p $WORKING_DIRECTORY/rootfs
cd $WORKING_DIRECTORY/rootfs


zcat $INITRAMFS | fakeroot cpio -idm 

# Now we extract the nested initramfs
# We force to overwrite existing files from busybox with '-u'
zcat rootfs.cgz | fakeroot cpio -vuidm 

# The nested initramfs archive can be removed now
echo $PWD
fakeroot rm -v rootfs.cgz

cd $WORKING_DIRECTORY 

# Generate container spec file config.json
docker-runc spec

# Allow writes
# jq can not work inplace - so we use a temporary file instead
jq '.root.readonly = "true"' config.json > config.json_tmp
mv config.json_tmp config.json

# Assing namespace with path.
# Watchout for the shell variable 'nspath' handed over jq as a jq varibale.
nspath=/var/run/netns/coinbootmaker
jq --arg nspath "$nspath" '(.linux.namespaces[] | select(.type == "network") |=. + {"path": $nspath})' config.json > config.json_tmp
mv config.json_tmp config.json

# We hijack the default Docker bridge docker0 for network access of our container.
# Least effort approch to determine a free und usable adress:
# Pick the highest available address of the 172.17.0.0. network which is 172.17.255.254/16.
# There are good chances that this address is unused.

sudo ip link add name cbm-host type veth peer name cbm-guest
sudo ip link set cbm-host up
sudo brctl addif docker0 cbm-host
sudo ip netns add coinbootmaker
sudo ip link set cbm-guest netns coinbootmaker

# This commands can only be executed if the container is already running.
sudo docker-runc -d coinbootmaker

while docker-runc list|grep coinbootmaker; do
  echo 'Waiting for Coinbootmaker container...'
  sleep 1
done

sudo ip netns exec coinbootmaker ip link set cbm-guest name eth0
sudo ip netns exec coinbootmaker ip addr add 172.17.255.254/16 dev eth0
sudo ip netns exec coinbootmaker set eth0 up
#$ sudo ip netns exec coinbootmaker ip route add default via 192.168.10.1

# We are affected by a race condition by the way how 'inotifywait'
# used in 'create_plugin' uses 'inotify' on recursive directories when
# not running on a superfast storage backend like RAMFS/TMPFS.
# Leading to random missing files while creating an plugin archive.
# There was a regression Docker < 18.02 ignoring
# the environment variable DOCKER_RAMDISK to be set.
# https://github.com/moby/moby/issues/36120


docker-runc exec coinbootmaker /bin/bash

# Cleanup

rm -rf $WORKING_DIRECTORY

# Dismante the networking limbo we have done before.
sudo ip link delete cbm-host


#if [ ! -z $interactive ] && [ $interactive = 'true' ]; then
#  docker run --rm -it -v "$PWD":/mnt coinbootmaker /bin/bash
#else
#  docker run --rm -it -v "$PWD":/mnt coinbootmaker bash -c 'cd /mnt/build/ && run-parts /mnt/src'
#fi

echo "Cleaning up $WORKING_DIRECTORY"
rm -rf $WORKING_DIRECTORY

